##########
# TP/UDP #
##########
###TRANSFORMERED FOR JGROUPS 3.6.1.Final
RULE incomingDataUDP
CLASS org.jgroups.protocols.UDP$PacketReceiver
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE DatagramSocket.receive
IF TRUE
DO
  incomingData();
ENDRULE

RULE discardMessages
CLASS ^java.util.concurrent.ThreadPoolExecutor
METHOD reject
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  discardMessages(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getDataIdentifiers($1));
ENDRULE

### replacing dispatchData rule with dispatchDataBatch and dispatchDataSingleMessage
RULE dispatchDataBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  forkSpan();
ENDRULE

RULE dispatchDataSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  forkSpan();
ENDRULE

### replacing dataDispatched rule with dataDispatchedBatch and dataDispatchedSingleMessage
RULE dataDispatchedBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  unforkSpan();
ENDRULE

RULE dataDispatchedSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  unforkSpan();
ENDRULE

RULE incomingDispatchedBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE

RULE incomingDispatchedSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE

#This is somehow causing NoClassDefFoundError: org/jgroups/util/ExposedByteArrayInputStream
RULE dataProcessingSingle
CLASS org.jgroups.protocols.TP$MyHandler
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE passMessageUp
IF TRUE
DO
  handlingMessage(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

#adding handling message for single message handler
RULE dataProcessingSingle2
CLASS org.jgroups.protocols.TP$SingleMessageHandler
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.TP.passMessageUp
IF TRUE
DO
  handlingMessage(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE batchProcessingStart
CLASS org.jgroups.protocols.TP$BatchHandler
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.TP.passBatchUp
IF TRUE
DO
  batchProcessingStart(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifiers($0.batch));
ENDRULE

RULE batchProcessingEnd
CLASS org.jgroups.protocols.TP$BatchHandler
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.TP.passBatchUp
IF TRUE
DO
  batchProcessingEnd();
ENDRULE

RULE sendMessageStart
CLASS org.jgroups.protocols.TP
METHOD send
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  outcomingStarted(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($1));
ENDRULE

RULE sendMessageEnd
CLASS org.jgroups.protocols.TP
#METHOD send(org.jgroups.Message, org.jgroups.Address)
METHOD send
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  outcomingFinished();
ENDRULE

############
# JChannel #
############

RULE batchedMessageProcessingUpHandler
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.UpHandler.up
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE batchedMessageProcessingReceive
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.Receiver.receive
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE batchedMessageProcessedUpHandler
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.UpHandler.up
IF TRUE
DO
  batchPop()
ENDRULE

RULE batchedMessageProcessedReceive
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.Receiver.receive
IF TRUE
DO
  batchPop()
ENDRULE

######################
# Protocol (general) #
######################

RULE Protocol_batchedUpStart
CLASS ^org.jgroups.stack.Protocol
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getEventIdentifier($@[1]))
ENDRULE

RULE Protocol_batchedUpFinished
CLASS ^org.jgroups.stack.Protocol
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPop();
ENDRULE

############
# UNICAST* #
############

RULE UNICAST2_NonCausal
CLASS org.jgroups.protocols.UNICAST2
METHOD up(org.jgroups.Event)
HELPER org.jboss.qa.jdg.messageflow.Tracer
#AT READ hdr.type
AFTER INVOKE getSrc
IF $hdr.type != 0 && $hdr.type != 4
DO
  setNonCausal();
  msgTag("UNICAST2");
ENDRULE

RULE UNICAST2_SendingAck
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE sendAck
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg))
ENDRULE

RULE UNICAST2_SentAck
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE sendAck
IF TRUE
DO
  batchPop();
ENDRULE


RULE UNICAST2_PassingUpBatch
CLASS org.jgroups.protocols.UNICAST2
METHOD removeAndPassUp
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE UNICAST2_PassedUpBatch
CLASS org.jgroups.protocols.UNICAST2
METHOD removeAndPassUp
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

RULE UNICAST2_BatchedOOBUpStart
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE UNICAST2_BatchedOOBUpFinished
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPop();
ENDRULE

RULE UNICAST_BatchedOOBUpStart
CLASS org.jgroups.protocols.UNICAST
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE UNICAST_BatchedOOBUpFinished
CLASS org.jgroups.protocols.UNICAST
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPop();
ENDRULE

###########
# UNICAST3 #
###########

RULE UNICAST3_NonCausal
CLASS org.jgroups.protocols.UNICAST3
METHOD up(org.jgroups.Event)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE getSrc
IF $hdr.type != 0 && $hdr.type != 4
DO
  setNonCausal();
  msgTag("UNICAST3");
ENDRULE

RULE UNICAST3_SendingAck
CLASS org.jgroups.protocols.UNICAST3
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE sendAck
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($win.first()))
ENDRULE

RULE UNICAST3_SentAck
CLASS org.jgroups.protocols.UNICAST3
METHOD handleBatchReceived
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE sendAck
IF TRUE
DO
  batchPop();
ENDRULE


RULE UNICAST3_PassingUpBatch
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE UNICAST3_PassedUpBatch
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

RULE UNICAST3_BatchedOOBUpStart
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($batch.first()));
ENDRULE

RULE UNICAST3_BatchedOOBUpFinished
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPop();
ENDRULE

###########
# NAKACK2 #
###########

RULE NAKACK2_RetransmitReq
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD handleXmitReq
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setNonCausal();
ENDRULE

#Changing method from removeAndPassUp to deliverBatch
RULE NAKACK2_PassingUpBatch
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE NAKACK2_PassedUpBatch
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD deliverBatch
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

###########
# Request #
###########

RULE MarkRequest
CLASS org.jgroups.blocks.Request
METHOD execute
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setMarkFromContext($0.cond);
ENDRULE

RULE ResponseReceived
CLASS org.jgroups.blocks.Request
METHOD receiveResponse
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  msgTag("RSP_" + getMark($0.cond));
ENDRULE

RULE RequestFinalized
CLASS org.jgroups.blocks.Request
METHOD finalize
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  removeMark($0.cond);
ENDRULE

#############
# Discovery #
#############

RULE Discovery
CLASS org.jgroups.protocols.Discovery
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 299
IF TRUE
DO
  msgTag("Discovery");
ENDRULE

#######
# FD* #
#######

RULE FD_SOCK
CLASS org.jgroups.protocols.FD_SOCK
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 223
IF TRUE
DO
  msgTag("FD");
ENDRULE

#RULE FD_ALL
#CLASS org.jgroups.protocols.FD_ALL
#METHOD up
#HELPER org.jboss.qa.jdg.messageflow.Tracer
#AT LINE 187
#IF TRUE
#DO
#  msgTag("FD");
#ENDRULE

# without at line trigger
RULE FD_ALL
CLASS org.jgroups.protocols.FD_ALL
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
BEFORE INVOKE update
IF TRUE
DO
  msgTag("FD");
ENDRULE


##################
# VERIFY_SUSPECT #
##################

RULE VERIFY_SUSPECT
CLASS org.jgroups.protocols.VERIFY_SUSPECT
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 123
IF TRUE
DO
  msgTag("VERIFY");
ENDRULE

######
# FC #
######

RULE FlowControl_Request
CLASS org.jgroups.protocols.FlowControl
METHOD handleUpEvent
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT READ num_credit_requests_received
IF TRUE
DO
  msgTag("FC_Request");
ENDRULE

RULE FlowControl_Replenish
CLASS org.jgroups.protocols.FlowControl
METHOD handleUpEvent
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE handleCredit
IF TRUE
DO
  msgTag("FC_Replenish");
ENDRULE

RULE FlowControl_BatchedHandleStart
CLASS org.jgroups.protocols.FlowControl
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.FlowControl.handleUpEvent
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE FlowControl_BatchedHandleFinished
CLASS org.jgroups.protocols.FlowControl
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.FlowControl.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE

RULE FC_BatchedHandleStart
CLASS org.jgroups.protocols.FC
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.FC.handleUpEvent
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE FC_BatchedHandleFinished
CLASS org.jgroups.protocols.FC
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.FC.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE


########
# RSVP #
########

RULE RSVP_ReqOnly
CLASS org.jgroups.protocols.RSVP
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 190
IF TRUE
DO
  msgTag("RSVP_ReqOnly");
ENDRULE

RULE RSVP_Resp
CLASS org.jgroups.protocols.RSVP
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE handleResponse
IF TRUE
DO
  msgTag("RSVP_Resp");
ENDRULE


##########
# RELAY* #
##########

RULE RELAY2_BatchedHandleStart
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.relay.RELAY2.handleMessage
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE RELAY2_BatchedHandleFinished
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.relay.RELAY2.handleMessage
IF TRUE
DO
  batchPop();
ENDRULE

RULE RELAY2_BatchedDeliverStart
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.relay.RELAY2.deliver
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE RELAY2_BatchedDeliverFinished
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.relay.RELAY2.deliver
IF TRUE
DO
  batchPop();
ENDRULE

RULE RELAY_BatchedHandleStart
CLASS org.jgroups.protocols.relay.RELAY
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE org.jgroups.protocols.relay.RELAY.handleUpEvent
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE RELAY_BatchedHandleFinished
CLASS org.jgroups.protocols.relay.RELAY
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE org.jgroups.protocols.relay.RELAY.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE

##########
# STABLE #
##########

RULE STABLE_BatchedHandleStart
CLASS org.jgroups.protocols.STABLE
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE handleUpEvent
IF TRUE
DO
  batchPush(org.jboss.qa.jdg.messageflow.MessageIdentifier361.getMessageIdentifier($msg));
ENDRULE

RULE STABLE_BatchedHandleFinished
CLASS org.jgroups.protocols.STABLE
METHOD up(org.jgroups.util.MessageBatch)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE
