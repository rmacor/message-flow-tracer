RULE putInternal_entry
CLASS org.infinispan.cache.impl.CacheImpl
METHOD putInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("PUT");
ENDRULE

RULE putInternal_exit
CLASS org.infinispan.cache.impl.CacheImpl
METHOD putInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("PUT_exit");
  destroyManagedContext();
ENDRULE

RULE putAllInternal_entry
CLASS org.infinispan.cache.impl.CacheImpl
METHOD putAllInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("PUT_ALL");
ENDRULE

RULE putAllInternal_exit
CLASS org.infinispan.cache.impl.CacheImpl
METHOD putAllInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("PUT_ALL_exit");
  destroyManagedContext();
ENDRULE

RULE removeInternal_entry
CLASS org.infinispan.cache.impl.CacheImpl
METHOD removeInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("REMOVE");
ENDRULE

RULE removeInternal_exit
CLASS org.infinispan.cache.impl.CacheImpl
METHOD removeInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("REMOVE_exit");
  destroyManagedContext();
ENDRULE

RULE get_entry
CLASS org.infinispan.cache.impl.CacheImpl
METHOD get(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("GET");
ENDRULE

RULE get_exit
CLASS org.infinispan.cache.impl.CacheImpl
METHOD get(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("GET_exit");
  destroyManagedContext();
ENDRULE

RULE getAsync_entry
CLASS org.infinispan.cache.impl.CacheImpl
METHOD getAsync(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("GET_ASYNC");
ENDRULE

RULE getAsync_exit
CLASS org.infinispan.cache.impl.CacheImpl
METHOD getAsync(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("GET_ASYNC_exit");
  destroyManagedContext();
ENDRULE

###########
# Transactions #
###########

RULE beginTx_entry
INTERFACE ^javax.transaction.TransactionManager
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("BEGIN_TX");
ENDRULE

RULE beginTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE beginTx_jbossTM_entry
CLASS ^com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("BEGIN_TX");
ENDRULE

RULE beginTx_jbossTM_exit
CLASS ^com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE commitTx_entry
INTERFACE ^javax.transaction.TransactionManager
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("COMMIT_TX");
ENDRULE

RULE commitTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE commitTx_jbossTM_entry
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("COMMIT_TX");
ENDRULE

RULE commitTx_jbossTM_exit
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple
METHOD commitAndDisassociate
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE TransactionImple.removeTransaction ALL
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE rollbackTx_entry
INTERFACE ^javax.transaction.TransactionManager
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("ROLLBACK_TX");
ENDRULE

RULE rollbackTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE rollbackTx_jbossTM_entry
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("ROLLBACK_TX");
ENDRULE

RULE rollbackTx_jbossTM_exit
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple
METHOD rollbackAndDisassociate
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT INVOKE TransactionImple.removeTransaction ALL
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE exceptionThrown
CLASS org.infinispan.cache.impl.CacheImpl
METHOD executeCommandAndCommitIfNeeded
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT THROW ALL
IF TRUE
DO
   checkpoint("Throwing " + $^);
   destroyManagedContext();
ENDRULE

###########
# Locking #
###########

RULE lock
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("LOCK " + $1);
ENDRULE

RULE lockOk
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF $!
DO
  checkpoint("LOCK_OK");
ENDRULE

RULE lockFail
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF !($!)
DO
  checkpoint("LOCK_FAIL");
ENDRULE

RULE unlock
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD unlock
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("UNLOCK " + $1);
ENDRULE

RULE unlockAll
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD unlockAll
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("UNLOCK_ALL " + $1.getLockedKeys());
ENDRULE

RULE dispatchCommandMulti
CLASS org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher
METHOD processCalls
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setContextMarkWithClass($1);
ENDRULE

RULE dispatchCommandSingle
CLASS org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher
METHOD processSingleCall
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setContextMarkWithClass($1);
ENDRULE

RULE commandPerform
INTERFACE ^org.infinispan.commands.ReplicableCommand
METHOD perform
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  msgTagWithClass($0);
ENDRULE

################
# Interceptors #
################

RULE invokeFirstInterceptorEntry
CLASS org.infinispan.interceptors.InterceptorChain
METHOD invoke
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("INT " + simpleName($2) + "@>@" + simpleName($0.firstInChain));
ENDRULE

RULE invokeFirstInterceptorExit
CLASS org.infinispan.interceptors.InterceptorChain
METHOD invoke
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("INT " + simpleName($2) + "@<@" + simpleName($0.firstInChain));
ENDRULE

RULE invokeNextInterceptorEntry
CLASS org.infinispan.interceptors.base.CommandInterceptor
METHOD invokeNextInterceptor
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("INT " + simpleName($2) + "@>@" + simpleName($0.next));
ENDRULE

RULE invokeNextInterceptorExit
CLASS org.infinispan.interceptors.base.CommandInterceptor
METHOD invokeNextInterceptor
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("INT " + simpleName($2) + "@<@" + simpleName($0.next));
ENDRULE
